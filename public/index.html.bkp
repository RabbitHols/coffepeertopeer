<!DOCTYPE html>
<html lang="it">
<head>
    <title>P2P Polling con PeerJS</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/peerjs/1.4.7/peerjs.min.js"></script>
</head>
<body>
    <h2>Coff√® Break ? ‚òï</h2>

    <input type="text" id="new-time" placeholder="Proponi un orario (es. 10:30)">
    <button onclick="addNewTime()">Proponi</button>

    <h3>Orari proposti:</h3>
    <ul id="votes-list"></ul>

    <h3>Il tuo Peer ID: <span id="my-peer-id">---</span></h3>
    <h3>Connesso a: <span id="connected-peers">---</span></h3>
    <h3>Peer Connessi: <span id="peer-count">0</span></h3>

    <input type="text" id="peer-id-input" placeholder="Inserisci ID peer">
    <button onclick="connectToPeer()">Connetti</button>

    <h3>IP Pubblici dei Peer:</h3>
    <ul id="peer-ips"></ul>

    <script>
        function generateReadableID() {
            const adjectives = ["Fast", "Happy", "Crazy", "Sleepy", "Cool", "Funky", "Lucky", "Clever"];
            const animals = ["Tiger", "Fox", "Panda", "Lion", "Elephant", "Owl", "Zebra", "Bear"];
            return `${adjectives[Math.floor(Math.random() * adjectives.length)]}-${animals[Math.floor(Math.random() * animals.length)]}`;
        }

        const peerID = generateReadableID();
        const peer = new Peer(peerID); // Peer ID pi√π leggibile
        let connections = [];
        let votes = {};
        let peerList = []; // Lista di peer connessi
        let peerIPs = {}; // Lista degli IP pubblici associati ai peer

        peer.on("open", id => {
            document.getElementById("my-peer-id").innerText = id;
            fetchMyIP();
        });

        function fetchMyIP() {
            fetch("https://api64.ipify.org?format=json")
                .then(response => response.json())
                .then(data => {
                    peerIPs[peerID] = data.ip;
                    updateIPList();
                });
        }

        function connectToPeer() {
            const peerId = document.getElementById("peer-id-input").value;
            if (!peerId) return alert("Inserisci un ID peer!");

            const conn = peer.connect(peerId);
            conn.on("open", () => {
                console.log("Connesso a", peerId);
                connections.push(conn);
                peerList.push(peerId);
                updateConnectedPeers();
                conn.on("data", receiveData);
                
                // Chiedi la lista dei peer e degli IP all'host
                conn.send({ type: "request-peer-list" });
                conn.send({ type: "request-ip-list" });
            });
        }

        function updateConnectedPeers() {
            document.getElementById("connected-peers").innerText = peerList.join(", ") || "---";
            document.getElementById("peer-count").innerText = peerList.length;
        }

        function updateIPList() {
            let ipListElement = document.getElementById("peer-ips");
            ipListElement.innerHTML = "";
            Object.keys(peerIPs).forEach(peerId => {
                ipListElement.innerHTML += `<li>${peerId} ‚Üí ${peerIPs[peerId]}</li>`;
            });
        }

        function updateVotesUI() {
            let votesList = document.getElementById("votes-list");
            votesList.innerHTML = "";
            Object.keys(votes).forEach(time => {
                votesList.innerHTML += `
                    <li>
                        ${time} - <b>${votes[time].yes}</b> üëç | <b>${votes[time].no}</b> üëé
                        <button onclick="vote('${time}', 'yes')">S√¨</button>
                        <button onclick="vote('${time}', 'no')">No</button>
                    </li>`;
            });
        }

        function addNewTime() {
            const newTime = document.getElementById("new-time").value.trim();
            if (!newTime || votes[newTime]) return alert("Orario gi√† presente o invalido!");

            votes[newTime] = { yes: 0, no: 0 };
            broadcastData({ type: "votes", data: votes });
            updateVotesUI();
        }

        function vote(time, type) {
            if (!votes[time]) return;
            votes[time][type] += 1;
            broadcastData({ type: "votes", data: votes });
            updateVotesUI();
        }

        function broadcastData(data) {
            connections.forEach(conn => conn.send(data));
        }

        function receiveData(data) {
            if (data.type === "votes") {
                votes = data.data;
                updateVotesUI();
            } else if (data.type === "peer-list") {
                peerList = data.data;
                updateConnectedPeers();
            } else if (data.type === "ip-list") {
                peerIPs = data.data;
                updateIPList();
            } else if (data.type === "request-peer-list") {
                broadcastData({ type: "peer-list", data: peerList });
            } else if (data.type === "request-ip-list") {
                broadcastData({ type: "ip-list", data: peerIPs });
            }
        }

        peer.on("connection", conn => {
            console.log("Nuovo peer connesso:", conn.peer);
            connections.push(conn);
            peerList.push(conn.peer);
            updateConnectedPeers();
            conn.on("data", receiveData);
            
            // Quando si connette un nuovo peer, invia la lista aggiornata di peer e IP
            broadcastData({ type: "peer-list", data: peerList });
            broadcastData({ type: "ip-list", data: peerIPs });

            // Chiede l'IP pubblico al nuovo peer
            conn.send({ type: "request-ip" });
        });

        updateVotesUI();
    </script>
</body>
</html>
